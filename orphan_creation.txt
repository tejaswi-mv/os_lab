wait and waitpid system calls


The wait and waitpid system calls are used in Unix-based operating systems to wait for child processes to terminate and obtain their exit status.


The wait system call suspends the execution of the parent process until a child process terminates. It then retrieves the exit status of the terminated child process and returns it to the parent process. The wait system call is a blocking call, which means that the parent process will be suspended until a child process terminates.


The waitpid system call is similar to wait, but it provides more control over which child process to wait for. The waitpid system call takes three arguments: the PID of the child process to wait for, a pointer to an integer to store the exit status of the child process, and a set of flags to modify the behavior of the waitpid call. The waitpid system call can be used in non-blocking mode by passing the WNOHANG flag, which causes the system call to return immediately if no child process has terminated.


Both wait and waitpid system calls are useful in managing child processes in a parent process. They allow the parent process to know when a child process has terminated, and to obtain information about the child process's exit status. The choice between wait and waitpid depends on the specific requirements of the program. wait is simpler to use and is sufficient if the program does not need to wait for a specific child process, while waitpid is more flexible and can be used to wait for a specific child process or to avoid blocking the parent process.






Sample Program: 


#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/wait.h>


int main() {
    pid_t pid;
    int status;


    pid = fork();  // Create a child process
    if (pid == -1) {
        printf("Error: Failed to fork process.\n");
        exit(1);
    } else if (pid == 0) {
        // Child process
        printf("Child process running.\n");
        sleep(2);  // Simulate some work
        printf("Child process exiting.\n");
        exit(0);
    } else {
        // Parent process
        printf("Parent process waiting for child process...\n");
        wait(&status);  // Wait for child process to terminate
        printf("Child process exited with status %d.\n", status);
    }


    return 0;
}